#version 450

struct SlimeAgent
{
    vec2 pos;
    float angle;
    float infectionRate;
    int infected;
    float padding;
};

layout(binding = 0) buffer agentBlock
{
    SlimeAgent agents[ ];
};

layout(binding = 1) uniform UBO
{
    float elapsedTime;
    float time;
    uint spaceWidth;
    uint spaceHeight;
    uint agentCount;

    // UI Component
    float sensorDist;
    int sensorSize;
    float angleDegreeSensor;
    float agentAngularSpeed;
    float agentSpeed;
    float diffuseRate;
    float decayRate;
} ubo;

layout (binding = 2, rgba8) uniform image2D image;

uint hash(uint value) {
    value ^= 2747636419u;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    return value;
}
float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}
#define PI 3.1415926538

float sense(SlimeAgent agent, float sensorAngleOffset)
{
    // To configure from UI
    const int sensorDist = int(ubo.sensorDist);
    const int sensorSize = ubo.sensorSize;

    float chemoAttractant = 0.0;
    vec2 sensorPos = agent.pos + vec2(cos(agent.angle + sensorAngleOffset), sin(agent.angle + sensorAngleOffset)) * sensorDist;

    for (int offsetX = -sensorSize; offsetX <= sensorSize; ++offsetX)
    {
        for (int offsetY = -sensorSize; offsetY <= sensorSize; ++offsetY)
        {
            int samplingCoordX = min(int(ubo.spaceWidth) - 1, max(0, int(sensorPos.x) + offsetX));
            int samplingCoordY = min(int(ubo.spaceHeight) - 1, max(0, int(sensorPos.y) + offsetY));
            chemoAttractant += imageLoad(image, ivec2(samplingCoordX, samplingCoordY)).r;
        }
    }

    return chemoAttractant;
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
    // 1D workload
    uint index = gl_GlobalInvocationID.x;
    if (index >= ubo.agentCount) {
        return;
    }
    const float speedFactor = ubo.agentSpeed - ubo.agentSpeed * 0.50 * agents[index].infected;
    vec2 cPos = agents[index].pos;
    uint random = hash(ubo.spaceWidth * uint(cPos.y) + uint(cPos.x) + hash(index + uint(ubo.time) * 1994));

    // To configure
    const float angleRadSensor = ubo.angleDegreeSensor * (PI / 180);
    const float angularSpeed = ubo.agentAngularSpeed * 2 * PI;

    // Sense forward chemo attractant to decide where to go
    float concentrationForward = sense(agents[index], 0);
    float concentrationLeft = sense(agents[index], -angleRadSensor);
    float concentrationRight = sense(agents[index], angleRadSensor);

    float normalizedSteerStrenght = scaleToRange01(random);

    if (concentrationForward > concentrationLeft && concentrationForward > concentrationRight) {
        // continue Forward
        agents[index].angle += 0;
    }
    else if (concentrationLeft > concentrationForward && concentrationRight > concentrationForward)
    {
        // continue Randomly
        float steer = (normalizedSteerStrenght - 0.5) * 2;
        agents[index].angle += steer * angularSpeed * ubo.elapsedTime;
    }
    else if (concentrationRight > concentrationLeft)
    {
        // continue Right
        agents[index].angle += normalizedSteerStrenght * angularSpeed * ubo.elapsedTime;
    }
    else if (concentrationLeft > concentrationRight)
    {
        // continue Left
        agents[index].angle -= normalizedSteerStrenght * angularSpeed * ubo.elapsedTime;
    }

    vec2 nDir = vec2(cos(agents[index].angle), sin(agents[index].angle));
    vec2 nPos = agents[index].pos + nDir * ubo.elapsedTime * speedFactor;

    if (nPos.x < 0 || nPos.x >= ubo.spaceWidth || nPos.y < 0 || nPos.y >= ubo.spaceHeight) {
        nPos.x = min(ubo.spaceWidth - 1, max(0, nPos.x));
        nPos.y = min(ubo.spaceHeight - 1, max(0, nPos.y));

        // give a new direction
        agents[index].angle = scaleToRange01(hash(random)) * 2 * PI;
    }
    agents[index].pos = nPos;

    float infectedColorFactor = 1.0;
    // infected
    if (agents[index].infected == 1) {
        agents[index].infectionRate += ubo.elapsedTime;
        infectedColorFactor /= 5 * agents[index].infectionRate;
    }

    vec4 agentColor = vec4(0.9 * infectedColorFactor, 0.9, 0.9 * infectedColorFactor, 1.0);

    vec4 oldTrail = imageLoad(image, ivec2(agents[index].pos));
    if (oldTrail.r < 0.05 && oldTrail.g > 0.8) {
        agents[index].infected = 1;
    }

    imageStore(image, ivec2(agents[index].pos), agentColor);
}